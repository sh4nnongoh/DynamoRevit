; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define Major
#define Minor
#define Rev
#define Build
#expr ParseVersion("..\..\..\Dynamo\bin\AnyCPU\Release\DynamoCore.dll", Major, Minor, Rev, Build)
#define ProductName "Dynamo Revit"
#define CoreProductName "Dynamo"
#define ProductVersion Str(Major) + "." + Str(Minor) + "." + Str(Rev)
#define FullVersion Str(Major) + "." + Str(Minor) + "." + Str(Rev) + "." + Str(Build)

[Setup]
AppName={#ProductName}
AppPublisher={#ProductName}
AppID={{BD3E04C9-9F53-4887-9F1A-D86722C0757E}
AppCopyright=
AppPublisherURL=http://www.dynamobim.org
AppSupportURL=http://www.dynamobim.org
AppUpdatesURL=http://www.dynamobim.org
AppVersion={#ProductVersion}
VersionInfoVersion={#ProductVersion}
VersionInfoCompany={#ProductName}
VersionInfoDescription={#ProductName} {#ProductVersion}
VersionInfoTextVersion={#ProductName} {#ProductVersion}
VersionInfoCopyright=
DefaultGroupName=Dynamo
OutputDir=.\
OutputBaseFilename=InstallDynamoRevit_{#FullVersion}
SetupIconFile=
Compression=lzma
SolidCompression=true
RestartIfNeededByRun=false
FlatComponentsList=false
ShowLanguageDialog=auto
DirExistsWarning=no
DisableDirPage=no
;CreateAppDir=no
DefaultDirName={pf64}\{#CoreProductName}
Uninstallable = no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Components]
Name: "DynamoCore"; Description: "Dynamo Core Functionality"; Types: full compact custom; Flags: fixed
Name: "DynamoForRevit2015"; Description: "Dynamo For Revit 2015"; Types: full compact custom;
Name: "DynamoForRevit2016"; Description: "Dynamo For Revit 2016"; Types: full compact custom;
Name: "DynamoForRevit2017"; Description: "Dynamo For Revit 2017"; Types: full compact custom;
Name: "DynamoTrainingFiles"; Description: "Dynamo Training Files"; Types: full

[Files]
;Needed before installation guaranteed to be complete
Source: "Extra\RevitInstallDetective.exe"; Flags: dontcopy
Source: "Extra\DynamoInstallDetective.dll"; Flags: dontcopy
Source: "Extra\RevitAddinUtility.dll"; Flags: dontcopy
Source: "Extra\DynamoAddinGenerator.exe"; Flags: dontcopy
Source: "..\..\src\DynamoRevitInstall\bin\x86\Release\DynamoRevit.msi"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "..\..\..\Dynamo\src\DynamoInstall\bin\x86\Release\DynamoCore.msi"; DestDir: "{tmp}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Run]
Filename: "msiexec.exe"; Parameters: "/i ""{tmp}\DynamoCore.msi"" /l* DynamoCore.log INSTALLDIR=""{app}"""
Filename: "msiexec.exe"; Parameters: "/i ""{tmp}\DynamoRevit.msi"" /l* DynamoRevit.log INSTALLDIR=""{app}"""

[Code]
var
silentFlag : String;
updateFlag : String;

/////////////////////////////////////////////////////////////////////
function RevitInstallationExists(Version: String): Boolean;
var 
  ResultCode: Integer;
begin
  if Exec(ExpandConstant('{tmp}\RevitInstallDetective.exe'), Version, '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    Result := (ResultCode = 0)
  else
    MsgBox('RevitInstallDetective failed!' + #13#10 + SysErrorMessage(ResultCode), mbError, MB_OK);
end;

function InitializeSetup(): Boolean;
var
  j: Cardinal;
  sUnInstPath: String;
  sUninstallString: String;
  revision: Cardinal;
  iResultCode: Integer;
  exeVersion: String;
  sMsg: String;
  sMsg2: String;
begin
  silentFlag := ''
  updateFlag := ''
  for j := 1 to ParamCount do
    begin
      if (CompareText(ParamStr(j),'/verysilent') = 0)  then
        silentFlag := '/VERYSILENT'
      else if (CompareText(ParamStr(j),'/silent') = 0)  then
          silentFlag := '/SILENT'
      else if (CompareText(ParamStr(j),'/UPDATE') = 0) then
          updateFlag := '/UPDATE'
    end;

  // we'll need these files to check for a revit installation
  ExtractTemporaryFile('RevitInstallDetective.exe');
  ExtractTemporaryFile('RevitAddinUtility.dll');
  ExtractTemporaryFile('DynamoInstallDetective.dll');
  ExtractTemporaryFile('DynamoAddinGenerator.exe');

  result := true
  // check if there is a valid revit installation on this machine, if not - fail
  if not (RevitInstallationExists('Revit2017') or RevitInstallationExists('Revit2016') or RevitInstallationExists('Revit2015')) then
    begin
	  MsgBox('Dynamo requires an installation of Revit 2015 or Revit 2016 or Revit 2017 in order to proceed!', mbCriticalError, MB_OK);
      result := false;
    end;

  // if old EXE version of 0.8.0 is installed, uninstall it
  sUnInstPath := 'Software\Microsoft\Windows\CurrentVersion\Uninstall\{6B5FA6CA-9D69-46CF-B517-1F90C64F7C0B}_is1'
  sUnInstallString := ''
  exeVersion := ''
  RegQueryStringValue(HKLM, sUnInstPath, 'UnInstallString', sUninstallString)
  RegQueryStringValue(HKLM, sUnInstPath, 'DisplayVersion', exeVersion)
  if (sUnInstallString <> '') and (exeVersion = '0.8.0') then
	Exec(RemoveQuotes(sUnInstallString), '/VERYSILENT /NORESTART /SUPPRESSMSGBOXES /UPDATE', '', SW_HIDE, ewWaitUntilTerminated, iResultCode);

  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#ProductName} {#Major}.{#Minor}');
  sUninstallString := '';
  RegQueryStringValue(HKLM64, sUnInstPath, 'UnInstallString', sUninstallString);
    if (sUninstallString <> '') then
	begin
		if not RegQueryDWordValue(HKLM64, sUnInstPath, 'RevVersion', revision) then
			begin
				sMsg := ExpandConstant('Could not determine the revision number for already installed {#ProductName} {#Major}.{#Minor}.')
				sMsg2 := ExpandConstant('Please uninstall {#ProductName} {#Major}.{#Minor} manually, before proceeding with the installation.')
				MsgBox(sMsg + #13#10#13#10 + sMsg2, mbInformation, MB_OK);
				result := false
			end
		else if (revision > {#Rev}) then
			begin
				sMsg := ExpandConstant('A newer version of {#ProductName} {#ProductVersion} is already installed.')
				sMsg2 := ExpandConstant('Please uninstall {#ProductName} {#Major}.{#Minor}.' + IntToStr(revision) + ' manually, before proceeding with the installation.')
				MsgBox(sMsg + #13#10#13#10 + sMsg2, mbInformation, MB_OK);
				result := false
			end
	end;
end;

// ---------------------------------------------------------------------------------------- //
// Uninstall previous installations if they are located in a different folder,
// based on user's decision.
procedure CheckInstallation(prodName: String);
var 
  iResultCode: Integer;
  sUnInstPath: String;
  sUninstallString: String;
  sUninstallParam: String;
  sInstallLocation: String;
  sInstallLocationParent: String;
begin
	sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\' + prodName);
	RegQueryStringValue(HKLM64, sUnInstPath, 'InstallLocation', sInstallLocation);
	sInstallLocationParent := copy(sInstallLocation,1,length(sInstallLocation)-length(prodName)-2);
	if((sInstallLocationParent<>WizardDirValue) and (sInstallLocation<>'')) then
	begin
		// Ask the user a Yes/No question
		if MsgBox(prodName + ' is already installed at ' 
					+ sInstallLocationParent + '. Do you want to install into the new location specified?', 
					mbConfirmation, MB_YESNO) = IDYES then
		begin		
			// user clicked Yes
			RegQueryStringValue(HKLM64, sUnInstPath, 'UnInstallString', sUninstallString);
			RegQueryStringValue(HKLM64, sUnInstPath, 'UnInstallParam', sUninstallParam);
			Exec(sUnInstallString, sUnInstallParam, '', SW_HIDE, ewWaitUntilTerminated, iResultCode);		
		end;	
	end
end;

procedure CurStepChanged(CurStep: TSetupStep);
var 
  sProductNameFull: String;
  sCoreProductNameFull: String;
begin
  if (CurStep=ssInstall) then
    begin
		sProductNameFull := '{#SetupSetting("AppName")}' + ' {#Major}.{#Minor}';
		sCoreProductNameFull := '{#CoreProductName} {#Major}.{#Minor}';
		CheckInstallation(sProductNameFull);
		CheckInstallation(sCoreProductNameFull);
	end;
end;
// ---------------------------------------------------------------------------------------- //

// check if the components exists, if they do enable the component for installation
procedure CurPageChanged(CurPageID: Integer);
begin
  if CurPageID = wpSelectComponents then
  if not RevitInstallationExists('Revit2015') then
    begin
      WizardForm.ComponentsList.Checked[1] := False;
      WizardForm.ComponentsList.ItemEnabled[1] := False;
    end;
  if not RevitInstallationExists('Revit2016') then
    begin
      WizardForm.ComponentsList.Checked[2] := False;
      WizardForm.ComponentsList.ItemEnabled[2] := False;
    end;
  if not RevitInstallationExists('Revit2017') then
    begin
      WizardForm.ComponentsList.Checked[3] := False;
      WizardForm.ComponentsList.ItemEnabled[3] := False;
    end;
end;
// ---------------------------------------------------------------------------------------- //